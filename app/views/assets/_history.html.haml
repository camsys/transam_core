.row
  .col-sm-12
    .well.well-small
      #timeline{:style => 'background-color:#FFF;'}

.row
  .col-sm-12
    %table.table.table-hover{:id => 'asset-history-table', :data => {:toggle => 'table',
      :card_view => "false",
      :pagination => 'true',
      :page_list => "[5, 10, 20, 50, 100, 200]",
      :page_size => current_user.num_table_rows,
      :show_columns => 'false',
      :state_save => 'true',
      :state_save_id_table => "asset_events_id",
      :state_save_expire => "1y",
      :show_export => 'true',
      :export_types => "['csv', 'txt', 'excel']",
      :show_toggle => 'false',
      :resizable => 'true',
      :search => 'false'}}
      %thead
        %tr
          %th{:data => {:sortable => 'true'}} Event
          %th{:data => {:sortable => 'true', :formatter => 'date_formatter'}} Date
          %th Update
          %th Notes
      %tbody
        :ruby
          # Extract into a hash array in order to include full updates from EarlyDispositionRequestUpdateEvent
          # EarlyDispositionRequestUpdateEvent is a special case as it is state-ful and each state represent one history
          asset_history = @asset.history.order(:event_date => :desc, :created_at => :desc).collect { |evt| 
            if evt.asset_event_type.try(:class_name) == 'EarlyDispositionRequestUpdateEvent' 
              ae = [{
                object_key: evt.object_key,
                description: evt.asset_event_type.description,
                event_date: evt.created_at,
                update: evt.get_update,
                comments: (evt.comments.blank? ? " " : evt.comments)
              }]

              ae << {
                object_key: evt.object_key,
                description: evt.asset_event_type.description,
                event_date: evt.updated_at,
                update: AssetEvent.as_typed_event(evt).get_latest_update,
                comments: (evt.comments.blank? ? " " : evt.comments)
              } unless AssetEvent.as_typed_event(evt).is_new?

              ae

            else
              {
                object_key: evt.object_key,
                description: evt.asset_event_type.description,
                event_date: evt.event_date,
                update: evt.get_update,
                comments: (evt.comments.blank? ? " " : evt.comments)
              }
            end
            
          }.flatten.sort_by {|evt| evt[:event_date]}.reverse

        - asset_history.each do |evt|
          %tr{:data => {:action_path => "#{inventory_asset_event_path(@asset, evt[:object_key])}"}}
            %td
              = evt[:description]
            %td
              = evt[:event_date]
            %td
              = evt[:update]
            %td
              = evt[:comments].html_safe

:javascript
  $(window).resize(function() {
    $('#asset-history-table').bootstrapTable('resetView');
  });

