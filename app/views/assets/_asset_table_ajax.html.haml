:css
  .flag-column {
    :width: 30px;
  }

#table_actions.btn-toolbar
  - SystemConfig.transam_module_names.each do |mod|
    - if lookup_context.template_exists?("#{mod}_index_actions", 'assets', true)
      = render :partial => "assets/#{mod}_index_actions"

.table-responsive
  %table.table.table-condensed.table-hover{:id => 'asset_server_table',
    :data => {:toggle => 'table',
    :url => inventory_index_path(:format => :json),
    :card_view => "false",
    :pagination => 'true',
    :sort_order => 'asc',
    :sortable => 'true',
    :side_pagination => 'server',
    :show_pagination_switch => 'true',
    :page_number => '1',
    :page_list => "[5, 10, 20, 50, 100, 200]",
    :page_size => current_user.num_table_rows,
    :search => 'false',
    :show_columns => 'true',
    :toolbar => "#table_actions",
    :show_export => 'true',
    :row_style => 'row_style',
    :click_to_select => 'true',
    :query_params => "query_params",
    :show_export => 'true',
    :id_field => 'object_key',
    :export_types => "['csv', 'txt', 'excel']",
    :state_save => 'true',
    :state_save_id_table => "assetsid",
    :state_save_expire => "1y",
    :maintain_selected => 'true',
    :single_select => 'false'}}
    %thead
      %tr
        - if @early_disposition
          %th.center{:data => {:field => 'checked', :checkbox => 'true'}}
        %th.center.icon-column{:data => {:field => 'tagged', :formatter => 'tagged_formatter'}}
          %i.fa.fa-star

        - SystemConfig.transam_module_names.each do |mod|
          - if lookup_context.template_exists?("#{mod}_asset_table_head", 'assets', true)
            = render :partial => "assets/#{mod}_asset_table_head"

        - if @early_disposition
          %th.center{:data => {:field => "early_disposition_notes", :sort_name => 'early_disposition_notes', :align => 'left', :sortable => 'true',  :searchable => 'true'}} Early Disposition Reason

        %th.center.flag-column{:data => {:field => 'tasks', :formatter => 'tasks_formatter'}}
          %i.fa.fa-flag
        %th.center.flag-column{:data => {:field => 'comments', :visible => 'false', :formatter => 'comments_formatter'}}
          %i.fa.fa-comments
        %th.center.flag-column{:data => {:field => 'documents', :visible => 'false', :formatter => 'documents_formatter'}}
          %i.fa.fa-files-o
        %th.center.flag-column{:data => {:field => 'photos', :visible => 'false', :formatter => 'images_formatter'}}
          %i.fa.fa-image
:javascript

  var selected_rows = new Set();

  var manufacturer_id = #{@manufacturer_id.to_i};
  var asset_type = #{@asset_type.to_i};
  var asset_subtype = #{@asset_subtype.to_i};
  var asset_group = #{@asset_group.to_i};
  var org_id = #{@org_id.to_i};
  var early_disposition = #{@early_disposition || false};
  var transferred_assets = #{@transferred_assets || false};

  //TODO writing this out with a longer notation takes considerably more time.
  var path = '#{@early_disposition ? inventory_asset_event_path("x", "event_key") : @transferred_assets ? edit_inventory_path("x") : inventory_path("x")}';

  var ids = #{ @id_filter_list };

  $(document).ready(function() {

    // Disable the table actions
    enable_disable_table_actions();

    // Add a handler for the print action which appends the selected orders to
    // the href
    $(".selected-action").on('click', function(e) {

      //get appropriate bulk update form and then update targets
      $(this).parent().children("input[name='targets']").val(Array.from(selected_rows));
      return true;
    });
  });

  function row_style(row, index) {
    return 'action-path';
  };

  function query_params(params) {
    if (manufacturer_id > 0) {
      params.manufacturer_id = manufacturer_id;
    }
    if (asset_type > 0) {
      params.asset_type = asset_type;
    }
    if (org_id > 0) {
      params.org_id = org_id;
    }
    if (asset_subtype > 0) {
      params.asset_subtype = asset_subtype;
    }
    if (asset_group > 0) {
      params.asset_group = asset_group;
    }
    if (ids.length > 0){
      params.ids = ids;
    }
    if (early_disposition) {
      params.early_disposition = 1;
    }
   if (transferred_assets) {
      params.transferred_assets = 1;
    }
    return params;
  }

  $('#asset_server_table').on('check.bs.table', function(e, row) {
    update_selected();
  }).on('uncheck.bs.table', function(e, row) {
    update_selected();
  }).on('check-all.bs.table', function(e, row) {
    update_selected();
  }).on('uncheck-all.bs.table', function(e, row) {
    update_selected();
  }).on('click-row.bs.table', function (e, row, $element) {
    if (!$($element.context).hasClass('bs-checkbox')) {
      var url = path.replace("x", row['object_key']);
      if(early_disposition) {
        url = url.replace("event_key", row['early_disposition_event_object_key']);
      }
      document.location.href = url;
    }
  }).on('sort.bs.table', function(e, name, order) {
    $('#asset_server_table').bootstrapTable('selectPage', 1);
  }).on('post-body.bs.table', function() {
    $('.fixed-table-container').css('min-height', '300px');
    $('#asset_server_table > tbody > tr').addClass('action-path');
  }).on('load-success.bs.table', function() {
    // Table reloaded, clear saved selection
    selected_rows = new Set();
    enable_disable_table_actions();
  });

  // Enables or disables the package actions depending on how many are selected
  function enable_disable_table_actions() {
    var num = selected_rows.size;
    if (num > 0) {
      $('.selected-action').removeClass('disabled');
    } else {
      $('.selected-action').addClass('disabled');
    }
  };

  // Updates the selected rows in the table
  function update_selected() {
    var selected = $('#asset_server_table').bootstrapTable('getSelections');
    selected_rows = new Set();
    for (i = 0; i < selected.length; i++) {
      //console.log(selected[i]);
      if(early_disposition) {
        selected_rows.add(selected[i].early_disposition_event_object_key);
      } else {
        selected_rows.add(selected[i].object_key);
      }

    }
    //console.log(selected_rows);
    enable_disable_table_actions();
  };

  // Removes an object identified by its object key from the set of objects selected
  function remove_from_selected(object_key) {
    selected_rows.delete(object_key);
    enable_disable_table_actions();
  };

  $(window).resize(function() {
    $('#asset_server_table').bootstrapTable('resetView');
  });

  function boolean_formatter(value) {
    if (value) {
      // add hidden div for exporting
      return '<i class="fa fa-check"></i><div style = "visibility: hidden;">Yes</div>';
    } else {
      return '<div style = "visibility: hidden;">No</div>';
    }
  };

  function integer_formatter(value) {
    return format("###,##0.", value);
  };

  function currency_formatter(value) {
    return '$' + integer_formatter(value);
  };

  function percentage_formatter(value) {
    if (value) {
      return format("##0.00", value) + "%";
    } else {
      return value;
    }
  };

  function date_formatter(value) {
    if (value) {
      return moment(value).format('M/D/YYYY');
    } else {
      return value;
    }
  };

  function convertUTCDateToLocalDate(date) {
      var newDate = new Date(date.getTime()+date.getTimezoneOffset()*60*1000);

      var offset = date.getTimezoneOffset() / 60;
      var hours = date.getHours();

      newDate.setHours(hours - offset);

      return newDate;
  };
  function tagged_formatter(value) {
    if (value == '1') {
      return '<i class="fa fa-star"></i>';
    } else {
      return '<i class="fa fa-star-o"></i>';
    }
  };

  function tasks_formatter(value) {
    if (value > 0) {
      return '<i class="fa fa-flag"></i>';
    }
    return "";
  };

  function documents_formatter(value) {
    if (value > 0) {
      return '<i class="fa fa-file-o"></i>';
    }
    return "";
  };

  function comments_formatter(value) {
    if (value > 0) {
      return '<i class="fa fa-comments"></i>';
    }
    return "";
  };

  function images_formatter(value) {
    if (value > 0) {
      return '<i class="fa fa-image"></i>';
    }
    return "";
  };
