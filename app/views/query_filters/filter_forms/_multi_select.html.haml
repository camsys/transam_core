- query_association_class = @query_field.query_association_class
- unless query_association_class
  = render 'query_filters/filter_forms/default'
- else
  :ruby
    unless local_assigns.has_key?(:model_values)
      association_model = query_association_class.table_name.classify.constantize rescue nil
      if association_model.respond_to? :active
        model_values = association_model.active
      else
        model_values = association_model.all
      end
      model_values = model_values.where(where_sql) if local_assigns.has_key?(:where_sql)
    end

    filter_values = @query_filter ? (@query_filter.value.try(:split, ',') || []).map(&:to_i) : model_values.pluck(query_association_class.id_field_name)

  %ul.multi-select-list{data: {query_field_id: @query_field.id}}
    %li.select-all-items
      %label.checkbox
        = check_box_tag 'select-all', 1, filter_values.size >= model_values.size
        (Select All)
    - model_values.pluck(query_association_class.id_field_name, query_association_class.display_field_name).each do |type_id, type_name|
      %li.multi-select-item
        %label.checkbox
          = check_box_tag "#{query_association_class.table_name}[]", type_id, filter_values.include?(type_id)
          = type_name

  :javascript
    $(function() {
      var query_field_id = #{@query_field.id};
      var container_selector = '.multi-select-list[data-query-field-id=' + query_field_id + ']';

      function getSelectedValues() {
        var vals = [];
        $(container_selector + ' .multi-select-item input[type=checkbox]:checked').each(function() {
          vals.push($(this).val());
        });

        return vals;
      }

      function updateFilterDetails() {
        var filter_details = {
          query_field_id: query_field_id,
          op: 'in',
          value: getSelectedValues().join(',')
        };

        _saved_query.setFilterDetails(query_field_id, filter_details);
      }

      updateFilterDetails();

      // update filter values
      $(container_selector + ' .multi-select-item input[type=checkbox]').change(function() {
        updateFilterDetails();
      });

      $(container_selector + ' .select-all-items input[type=checkbox]').change(function() {
        if($(this).is(":checked")) {
          $(this).parents('.multi-select-list').find('.multi-select-item input[type=checkbox]').prop('checked', true);
        } else {
          $(this).parents('.multi-select-list').find('.multi-select-item input[type=checkbox]').prop('checked', false);
        }

        updateFilterDetails();
      });
    });