:ruby

  assignable_roles = Role.roles.map{ |r| [r.label, r.id] if can? :assign, r }.compact
  assignable_privileges = Role.privileges.where(role_parent: nil, show_in_user_mgmt: true).map{ |r| [r.label, r.id] if can? :assign, r }.compact
  assignable_super_privileges = Role.privileges.where(show_in_user_mgmt: true).where.not(role_parent: nil).map{ |r| [r.id, r.label, r.role_parent_id] if can? :assign, r }.compact

%fieldset
  %legend User Organizations
  .row
    .col-lg-6.col-md-6.col-sm-6.col-xs-12
      = f.association :organization, :collection => Organization.where(id: @organization_list), :label_method => 'coded_name', :selected => (@user.organization_id || params[:organization_id]), :include_blank => true
    .col-lg-6.col-md-6.col-sm-6.col-xs-12

      = f.input :organization_ids, :as => :hidden
      .form-group.required
        %label.required.control-label
          %abbr{title: 'required'} *
          = " Organizations"
        #org_select.input-large

%fieldset
  %legend Roles & Privileges

  .row
    .col-lg-6.col-md-6.col-sm-6.col-xs-12
      = f.input :role_ids, :label => "User Role", :collection => assignable_roles, :required => true
      = f.collection_check_boxes :privilege_ids, assignable_super_privileges, :first, :second, :item_wrapper_class => 'checkbox' do |b|
        = b.check_box(:class => 'super-privilege', :data => { resource_id: b.object.third.to_s}) + b.text

    - if assignable_privileges.count > 0
      .col-lg-6.col-md-6.col-sm-6.col-xs-12
        #privilege-ids-div
          = f.input :privilege_ids, :label => "User Privileges", :collection => assignable_privileges, :as => :check_boxes, :input_html => { :multiple => true }

- SystemConfig.transam_module_names.each do |mod|
  - if lookup_context.template_exists?("#{mod}_authorization_fields_scripts", 'users', true)
    = render :partial => "users/#{mod}_authorization_fields_scripts"

