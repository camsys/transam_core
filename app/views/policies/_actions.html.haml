- if can? :update, @policy or can? :create, @policy or can? :destroy, @policy
  .btn-group.pull-right.panel-action
    %button.btn.btn-primary.btn-sm.dropdown-toggle{:data => {:toggle => 'dropdown'}}
      %i.fa.fa-cog
      = " Actions"
      %span.caret
    %ul.dropdown-menu{:role => 'menu'}
      %li
        = link_to policy_path(@policy, :format => 'xls') do
          %i.fa.fa-fw.fa-file-excel-o
          = " Export rules to Excel"
      - if can? :update, @policy
        %li.divider
        %li
          = link_to edit_policy_path(@policy) do
            %i.fa.fa-edit.fa-fw
            = " Modify this policy"
      - if @policy.active
        %li.divider
        %li
          = link_to updater_policy_path(@policy) do
            %i.fa.fa-fw.fa-cogs
            = " Apply this policy"
      - else
        %li.divider
        %li
          = link_to make_current_policy_path(@policy) do
            %i.fa.fa-check-square-o.fa-fw
            = " Set as current"

      - if can? :create, @policy
        %li.divider
        %li
          = link_to copy_policy_path(@policy) do
            %i.fa.fa-copy.fa-fw
            = " Make a copy"

      - if can? :destroy, @policy
        %li.divider
        %li
          = link_to policy_path(@policy), :method => :delete, :data => {:confirm => "Are you sure?. The action cannot be undone!."}  do
            %i.fa.fa-trash-o.fa-fw
            = " Remove this policy"

      - if !@policy.parent.present?
        %li.divider
        %li
          = link_to new_policy_rule_policy_path(@policy, :type => 'asset_type'), :remote => true do
            %i.fa.fa-plus.fa-fw
            = " Add an Asset Type Rule"

        %li.divider
        %li
          = link_to new_policy_rule_policy_path(@policy, :type => 'asset_subtype'), :remote => true do
            %i.fa.fa-plus.fa-fw
            = " Add an Asset Subtype Rule"
