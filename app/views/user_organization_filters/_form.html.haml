.row
  = simple_form_for([current_user, @user_organization_filter], :html => {:id => 'filter_form', :class => 'form-vertical' }, :wrapper => :vertical_form, :wrapper_mappings => {:boolean => :vertical_boolean}) do |f|
    .col-md-6
      = dialog_tag('Details', {:icon => 'fa fa-list', :class => "form-part"}) do
        = f.input :name, :placeholder => "Enter a name for this filter", :required => true
        = f.input :description, :as => :text, :placeholder => "Enter a description for this filter.", :rows => 3, :required => true
        = f.hidden_field :organization_ids, :multiple => true

        - if can? :share, @user_organization_filter
          .form-group
            = check_box_tag :share_filter, 1, @user_organization_filter.users.count > 1, style: 'margin-left: 10px;'
            Share this filter?

    .col-md-6
      = dialog_tag('Organizations Filter', {:icon => 'fa fa-list', :class => "form-part"}) do

        .form-group
          =# select_tag(:query, options_for_select(QueryParam.active.where(class_name: f.object.class.name).map{|x| [x.to_s,x.id]}, :selected => QueryParam.find_by(class_name: f.object.class.name, query_string: f.object.query_string).try(:id)), :class => "form-control", :prompt => "Choose Organizations")

        #org_select.input-xlarge

 
    .col-md-12
      - unless current_user.user_organization_filter == @user_organization_filter
        = f.button :submit, "Update Organization Filter", :class => "btn btn-primary"
      = f.button :submit, "Update and Select This Filter", :class => "btn btn-primary"

= render 'form_scripts'

:javascript

  // if (parseInt($('#query').val()) > 0) { // if query
  //   $('#org_select').hide();
  // }  else {
  //   $('#org_select').show();
  // }
  //
  // // check if using query or selecting orgs
  // $('#query').on('change', function(e) {
  //   var val = $(this).val();
  //   if (parseInt(val) > 0) { // if query
  //     $('#org_select').data().bootstrapTransfer.move_all(true, false); // clear out all selected values
  //     $('#org_select').hide();
  //     $('input[name="commit"]').attr('disabled', false);
  //   }  else {
  //     $('#org_select').show();
  //     if ($('#selected_grantees option').length > 0) {
  //       $('input[name="commit"]').attr('disabled', false);
  //     } else {
  //       $('input[name="commit"]').attr('disabled', true);
  //     }
  //   }
  // });

  $('#filter_form').validate({
    ignore: '#user_organization_filter_organization_ids, .filtered, .filter-input'
  });

  $('#org_select').on('click', 'btn', function(){
    if ($('#selected_grantees option').length > 0) {
      $('input[name="commit"]').attr('disabled', false);
    } else {
      $('input[name="commit"]').attr('disabled', true);
    }
  });

  $('input[name="commit"]').attr('disabled', '#{@user_organization_filter.new_record?}' == 'true');